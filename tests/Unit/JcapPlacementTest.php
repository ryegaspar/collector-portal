<?php

namespace Tests\Feature;

use App\Unifin\Repositories\Placements\Jcap;
use Illuminate\Support\Facades\File;
use Tests\TestCase;
use Illuminate\Foundation\Testing\RefreshDatabase;

class JcapPlacementTest extends TestCase
{
    protected $placement;
    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->placement = new Jcap(public_path('test\placements\UNI.test.NB.TXT'));

    }

    /** @test */
    function just_a_test()
    {
        dd($this->placement->getRecords());
    }

    /** @test */
    function it_knows_how_many_records()
    {
        $this->assertEquals(6, $this->placement->recordCounts());
    }

    /** @test */
    function it_determines_the_bframe_ids()
    {
        $expected = ['3099861268', '3251864580', '3255045581', '3227630020', '3296868122', '3130393862'];

        $this->assertEquals($expected, $this->placement->getBframeIDs());
    }

    /** @test */
    function it_determines_remote_ids()
    {
        $expected = ['1029', '1029', '1029', '1029', '1029', '1029'];

        $this->assertEquals($expected, $this->placement->getRemoteIDs());
    }

    /** @test */
    function it_determines_placement_dates()
    {
        $expected = ['20180515', '20180515', '20180515', '20180515', '20180515', '20180515'];

        $this->assertEquals($expected, $this->placement->getPlacementDates());
    }

    /** @test */
    function it_determines_portfolios()
    {
        $expected = ['LIBRTY', 'VERIZNVERZN1', 'CENTUR', 'VERIZNVERZN1', 'VERIZN0185', 'RJMPUREI'];

        $this->assertEquals($expected, $this->placement->getPortfolios());
    }

    /** @test */
    function it_determines_record_types()
    {
        $expected = ['CN', 'CN', 'CN', 'CN', 'CN', 'CN'];

        $this->assertEquals($expected, $this->placement->getRecordType());
    }

    /** @test */
    function it_determines_credit_grantor_number()
    {
        $expected = ['5491100022285913', '052295027300001', '540652', '032353495800001', '087181415900001', '0021756857'];

        $this->assertEquals($expected, $this->placement->getCreditGrantorNumber());
    }

    /** @test */
    function it_determines_social_security()
    {
        $expected = ['384589877', '007661989', '635245830', '363067390', '542048109', '262454479'];

        $this->assertEquals($expected, $this->placement->getSocialSecurity());
    }

    /** @test */
    function it_determines_last_name()
    {
        $expected = ['KOZERA', 'CLAY', 'PORTILLO', 'LAFOLLETTE', 'HEPNER', 'ADAMS'];

        $this->assertEquals($expected, $this->placement->getLastName());
    }

    /** @test */
    function it_determines_first_name()
    {
        $expected = ['MICHELLE L', 'KRISTA', 'ELMER', 'ZACHARY C', 'SHANE S', 'TERENCE A'];

        $this->assertEquals($expected, $this->placement->getFirstName());
    }

    /** @test */
    function it_determines_address_1()
    {
        $expected = ['1584 GERALDTON PL', '101 FARMINGTON CT', '4826 PRAIRIE RIDGE RD', '71 RIVERCHASE DR', '275 E 2ND ST', '504 PORTOBELLO DR'] ;

        $this->assertEquals($expected, $this->placement->getAddress1());
    }

    /** @test */
    function it_determines_address_2()
    {
        $expected = ['APT 2', '', '', '', '', ''] ;

        $this->assertEquals($expected, $this->placement->getAddress2());
    }

    /** @test */
    function it_determines_city()
    {
        $expected = ['TRAVERSE CITY', 'STERLING', 'HOUSTON', 'VILLA RICA', 'LOWELL', 'JACKSONVILLE'] ;

        $this->assertEquals($expected, $this->placement->getCity());
    }

    /** @test */
    function it_determines_state()
    {
        $expected = ['MI', 'VA', 'TX', 'GA', 'OR', 'FL'] ;

        $this->assertEquals($expected, $this->placement->getStateProvince());
    }

    /** @test */
    function it_determines_postal_code()
    {
        $expected = ['496864948', '201641713', '770530000', '301800000', '974529601', '322213265'] ;

        $this->assertEquals($expected, $this->placement->getPostal());
    }

    /** @test */
    function it_determines_home_telephone()
    {
        $expected = ['3034253570', '0', '0', '0', '5415253109', '0'] ;

        $this->assertEquals($expected, $this->placement->getHomeTelephone());
    }

    /** @test */
    function it_determines_business_telephone()
    {
        $expected = ['0', '7034446124', '0', '7708715331', '5419371006', '0'] ;

        $this->assertEquals($expected, $this->placement->getBusinessTelephone());
    }

    /** @test */
    function it_does_something()
    {
       $expected = ['', '', '', '', '', ''] ;

       $this->assertEquals($expected, $this->placement->getSomething());
    }


}